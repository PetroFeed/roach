#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var resolve = path.resolve;
var join = path.join;
var fs = require('fs');
var spawn = require('win-fork');
var exists = fs.existsSync;

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('<command> [options]')
  .option('-r, --redis', 'set redis authentication config');


/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Commands:');
  console.log();
  console.log('    create [dir]            create a roach bug');
  console.log('    run            scan folder and looking for jobs');  
  console.log();
});


/**
 * Parse.
 */

program.parse(process.argv);

// args void of cmd

var args = process.argv.slice(3);

// command

var cmd = program.args[0];

// executable

var bin = 'roach-' + cmd;

// local or resolve to absolute executable path

var local = join(__dirname, bin);


function spawnCmd(conf) {

  if (exists(local)) {
    bin = local;
  } else {
    // bin = process.env.PATH.split(':').reduce(function(binary, p) {
    //   p = resolve(p, bin);
    //   return exists(p) && stat(p).isFile() ? p : binary;
    // }, bin);
  }

  // display help if bin does not exist

  if (!exists(bin)) {
    console.error('\n  %s(1) does not exist', bin);
    program.help();
  }

  // spawn
  var proc = spawn(bin, conf ? [conf] : [], { stdio: 'inherit', customFds: [0, 1, 2] });

  proc.on('close', function(code){
    process.exit(code);
  });

}


if(program.redis) {

  var prompt = {
    port: 'port (default: 6379) : ',
    host: 'host (default: 127.0.0.1) : '
  };

  // prompt

  program.prompt(prompt, function(obj){
    var conf = {};
    conf.port = obj.port || 6379;
    conf.host = obj.host || '127.0.0.1';
    spawnCmd(JSON.stringify(conf));
  });

} else {
  spawnCmd();
}



