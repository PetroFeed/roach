#!/usr/bin/env node

var _ = require('lodash');
var program = require('commander');
var path = require('path');
var resolve = path.resolve;
var join = path.join;
var fs = require('fs');
var spawn = require('win-fork');
var exists = fs.existsSync;


/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('<command> [options]')
  .option('-r, --redis', 'set redis authentication config')
  .option('-s, --server', 'run roach in server mode');


/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Commands:');
  console.log();
  console.log('    create [dir]       scaffold a roach crawler in the given directory');
  console.log('    run                run the roach server');
  console.log();
});


/**
 * Parse.
 */

program.parse(process.argv);

// args void of cmd

var args = process.argv.slice(3);

// command

var cmd = program.args[0];

// executable

var bin = 'roach-' + cmd;

// local or resolve to absolute executable path

var local = join(__dirname, bin);


function spawnCmd(conf) {

  if (exists(local)) {
    bin = local;
  }
  
  // display help if bin does not exist

  if (!exists(bin)) {
    console.error('\n  %s"(1)"" is not a valid roach command', bin);
    program.help();
  }

  if (program.server) {
    conf = _.extend({}, conf, { server: true });
  }

  // spawn
  var proc = spawn(bin, _.isEmpty(conf) ? [] : [JSON.stringify(conf)], { stdio: 'inherit', customFds: [0, 1, 2] });

  proc.on('close', function(code){
    process.exit(code);
  });

}


if(program.redis) {

  var prompt = {
    port: 'port (default: 6379) : ',
    host: 'host (default: 127.0.0.1) : '
  };

  // prompt

  program.prompt(prompt, function(obj){
    var conf = {};
    conf.port = obj.port || 6379;
    conf.host = obj.host || '127.0.0.1';
    spawnCmd(conf);
  });

} else {
  spawnCmd();
}



